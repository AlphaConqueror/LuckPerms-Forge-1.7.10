buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    }

    dependencies {
        classpath 'org.spongepowered:mixingradle:0.4-SNAPSHOT'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'java-library'
}

apply plugin: 'forge'

sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
    version = "${minecraftVersion}-${forgeVersion}"
    mappings = "stable_12"
}

repositories {
    mavenCentral()

    maven {
        url 'https://repo.spongepowered.org/maven/'
    }
}

configurations {
    shade
    implementation.extendsFrom shade
}

dependencies {
    implementation project(':api')
    implementation project(':common')
    implementation project(':common:loader-utils')
    implementation project(':forge')
    implementation project(':forge:forge-api')

    shade 'com.zaxxer:HikariCP:4.0.3'
    shade 'org.mariadb.jdbc:mariadb-java-client:3.1.4'
    shade 'com.mysql:mysql-connector-j:8.0.33'

    shade("org.spongepowered:mixin:0.7.11-SNAPSHOT") {
        exclude module: 'launchwrapper'
        exclude module: 'guava'
    }
}

ext.mixinSrg = new File(project.buildDir, "resources/main/stoneluckperms.mixins.srg")
ext.mixinRefMap = new File(project.buildDir, "resources/main/stoneluckperms.refmap.json")

build {
    dependsOn(":forge:build")
    dependsOn(":forge:forge-api:build")
}

jar {
    manifest {
        attributes(
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Implementation-Title': 'StoneLuckPerms',
                'Implementation-Vendor': 'StoneLuckPerms',
                'Implementation-Version': project.ext.fullVersion,
                'Specification-Title': 'StoneLuckPerms',
                'Specification-Vendor': 'StoneLuckPerms',
                'Specification-Version': '1',
                'FMLCorePlugin': 'me.lucko.luckperms.forge.loader.ForgeLoaderPluginCore',
                'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker'
        )
    }
}

processResources {
    filesMatching('mcmod.info') {
        expand 'version': project.ext.fullVersion
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ['-Xlint:all', '-Xlint:-path', "-AreobfSrgFile=${tasks.reobf.srg}"]
    options.deprecation = true
    options.encoding = 'utf8'
}

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    options.compilerArgs += [
            '-Xlint:all',
            '-Xlint:-path',
            '-Xlint:-processing',
            "-AreobfSrgFile=${project.file('build/srgs/mcp-srg.srg').getCanonicalPath()}"
    ]

    if (project.mixinSrg.exists()) {
        options.compilerArgs += "-AoutSrgFile=${project.mixinSrg.getCanonicalPath()}"
    }

    if (project.mixinRefMap.exists()) {
        options.compilerArgs += "-AoutRefMapFile=${project.mixinRefMap.getCanonicalPath()}"
    }

    options.deprecation = true
    options.encoding = 'UTF-8'
}

shadowJar {
    archiveFileName = "StoneLuckPerms-Forge-${project.ext.fullVersion}.jar"
    project.configurations.implementation.canBeResolved = true
    configurations = [project.configurations.implementation, project.configurations.shade]

    dependencies {
        include(dependency('net.luckperms:.*'))
        include(dependency('me.lucko.luckperms:.*'))
        include(dependency('net.kyori:.*'))
        include(dependency('com.github.ben-manes.caffeine:.*'))
        include(dependency('com.squareup.okio:.*'))
        include(dependency('com.squareup.okhttp3:.*'))
        include(dependency('net.bytebuddy:.*'))
        include(dependency('org.mariadb.jdbc:.*'))
        include(dependency('com.mysql:.*'))
        include(dependency('org.postgresql:.*'))
        include(dependency('com.zaxxer:.*'))
        include(dependency('com.mongodb:.*'))
        include(dependency('org.bson:.*'))
        include(dependency('redis.clients.jedis:.*'))
        include(dependency('io.nats.client:.*'))
        include(dependency('com.rabbitmq:.*'))
        include(dependency('org.apache.commons.pool2:.*'))
        include(dependency('ninja.leaping.configurate:.*'))
        include(dependency('org.yaml.snakeyaml:.*'))
        include(dependency('org.spongepowered:.*'))
        include(dependency('com.typesafe:.*'))
        include(dependency('org.slf4j:.*'))
    }

    relocate 'net.kyori.adventure', 'me.lucko.luckperms.lib.adventure'
    relocate 'net.kyori.event', 'me.lucko.luckperms.lib.eventbus'
    relocate 'com.github.benmanes.caffeine', 'me.lucko.luckperms.lib.caffeine'
    relocate 'okio', 'me.lucko.luckperms.lib.okio'
    relocate 'okhttp3', 'me.lucko.luckperms.lib.okhttp3'
    relocate 'net.bytebuddy', 'me.lucko.luckperms.lib.bytebuddy'
    relocate 'org.mariadb.jdbc', 'me.lucko.luckperms.lib.mariadb'
    relocate 'com.mysql', 'me.lucko.luckperms.lib.mysql'
    relocate 'org.postgresql', 'me.lucko.luckperms.lib.postgresql'
    relocate 'com.zaxxer.hikari', 'me.lucko.luckperms.lib.hikari'
    relocate 'com.mongodb', 'me.lucko.luckperms.lib.mongodb'
    relocate 'org.bson', 'me.lucko.luckperms.lib.bson'
    relocate 'redis.clients.jedis', 'me.lucko.luckperms.lib.jedis'
    relocate 'io.nats.client', 'me.lucko.luckperms.lib.nats'
    relocate 'com.rabbitmq', 'me.lucko.luckperms.lib.rabbitmq'
    relocate 'org.apache.commons.pool2', 'me.lucko.luckperms.lib.commonspool2'
    relocate 'ninja.leaping.configurate', 'me.lucko.luckperms.lib.configurate'
    relocate 'org.yaml.snakeyaml', 'me.lucko.luckperms.lib.yaml'
    relocate 'com.typesafe', 'me.lucko.luckperms.lib.typesafe'
    relocate 'org.slf4j', 'me.lucko.luckperms.lib.slf4j'

    exclude '**/module-info.class'
}

reobf {
    if (mixinSrg.exists()) {
        addExtraSrgFile mixinSrg
    }

    reobf(shadowJar.archivePath) {
        spec -> spec.classpath = configurations.compileClasspath
    }
}

task copySrgs(type: Copy, dependsOn: "genSrgs") {
    // using some FG hacks here
    from plugins.getPlugin("forge").delayedFile("{SRG_DIR}")
    include '**/*.srg'
    into 'build/srgs'
}

setupDecompWorkspace.dependsOn copySrgs
setupDevWorkspace.dependsOn copySrgs
compileJava.dependsOn copySrgs
reobf.dependsOn shadowJar
